# -*- coding: utf-8 -*-
"""Nearest

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11jftcylNrVpADUrCOany1ufux3JsF0Qt
"""

import os
import pandas as pd

import warnings; 
warnings.simplefilter('ignore')

!git clone https://github.com/farelarden/Dicoding-Capstone-ML.git

dataset_1 = pd.read_csv('/content/Dicoding-Capstone-ML/Dataset/Latitude & Longitude Dataset/longitude, latitude.csv')
dataset_2 = pd.read_csv('/content/Dicoding-Capstone-ML/Dataset/Latitude & Longitude Dataset/longitude, latitude.csv')

dataset_1.tail()

# Renaming the column names 
dataset_1=dataset_1.rename(columns = {'Latitude':'lat','Longitude':'lon'})
dataset_2=dataset_2.rename(columns = {'Latitude':'lat','Longitude':'lon'})
# To make sure that there are no null values and All are either integers/ Float values 
dataset_1.info() 
print('\n XXXXXXXXXXXXXXXXXXXXXXX\n')
dataset_2.info()

from math import radians, cos, sin, asin, sqrt
def dist(lat1, long1, lat2, long2):
    """
    Calculate the great circle distance between two points 
    on the earth (specified in decimal degrees)
    """
    # convert decimal degrees to radians 
    lat1, long1, lat2, long2 = map(radians, [lat1, long1, lat2, long2])
    # haversine formula 
    dlon = long2 - long1 
    dlat = lat2 - lat1 
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a)) 
    # Radius of earth in kilometers is 6371
    km = 6371* c
    return km

def find_nearest(lat, long):
    distances = dataset_1.apply(
        lambda row: dist(lat, long, row['lat'], row['lon']), 
        axis=1)
    return dataset_1.loc[distances.idxmin(), 'Kota']

dataset_2.dtypes

Kota_Pilihan = "KOTA MEULABOH"

dataset_2_1 = dataset_2[dataset_2.Kota != Kota_Pilihan]

dataset_2_1

dataset_2_1_1 = dataset_2.set_index("Kota")
dataset_2_1_2 = dataset_2_1_1.loc[["KOTA BANDA ACEH"]]

dataset_2_1_2

dataset_2_1_2['lat']

dataset_2_1 = dataset_2_1.to_dict('records')

dataset_2_1

type(dataset_2_1)

distances = []

def distance(lat1, lon1, lat2, lon2):
    p = 0.017453292519943295
    hav = 0.5 - cos((lat2-lat1)*p)/2 + cos(lat1*p)*cos(lat2*p) * (1-cos((lon2-lon1)*p)) / 2
    return 12742 * asin(sqrt(hav))

def closest(data, v):
    # return second_smallest(data, key=lambda p: distance(v['lat'],v['lon'],p['lat'],p['lon']))
    # second_smallest(distances)
    return min(data, key=lambda p: distance(v['lat'],v['lon'],p['lat'],p['lon']))

v = {'lat': dataset_2_1_2['lat'], 'lon': dataset_2_1_2['lon']}
closest_1 = closest(dataset_2_1, v)
print(closest_1)

First_city = closest_1.get('Kota')

for i in range(len(dataset_2_1)):
    if dataset_2_1[i]['Kota'] == First_city:
        del dataset_2_1[i]
        break

distances = []

def distance(lat1, lon1, lat2, lon2):
    p = 0.017453292519943295
    hav = 0.5 - cos((lat2-lat1)*p)/2 + cos(lat1*p)*cos(lat2*p) * (1-cos((lon2-lon1)*p)) / 2
    return 12742 * asin(sqrt(hav))

def closest(data, v):
    # return second_smallest(data, key=lambda p: distance(v['lat'],v['lon'],p['lat'],p['lon']))
    # second_smallest(distances)
    return min(data, key=lambda p: distance(v['lat'],v['lon'],p['lat'],p['lon']))

v = {'lat': dataset_2_1_2['lat'], 'lon': dataset_2_1_2['lon']}
closest_2 = closest(dataset_2_1, v)
print(closest_2)

Second_city = closest_2.get('Kota')

